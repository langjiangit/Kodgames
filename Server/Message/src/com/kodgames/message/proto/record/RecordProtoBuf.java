// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/record.proto

package com.kodgames.message.proto.record;

public final class RecordProtoBuf {
  private RecordProtoBuf() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface BGRecordLogSYNOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 roomID = 1;
    /**
     * <code>required int32 roomID = 1;</code>
     *
     * <pre>
     * 房间ID
     * </pre>
     */
    boolean hasRoomID();
    /**
     * <code>required int32 roomID = 1;</code>
     *
     * <pre>
     * 房间ID
     * </pre>
     */
    int getRoomID();

    // required int64 roomStartTime = 2;
    /**
     * <code>required int64 roomStartTime = 2;</code>
     *
     * <pre>
     * 房间开始时间
     * </pre>
     */
    boolean hasRoomStartTime();
    /**
     * <code>required int64 roomStartTime = 2;</code>
     *
     * <pre>
     * 房间开始时间
     * </pre>
     */
    long getRoomStartTime();

    // required int32 roomType = 3;
    /**
     * <code>required int32 roomType = 3;</code>
     *
     * <pre>
     * 房间类型
     * </pre>
     */
    boolean hasRoomType();
    /**
     * <code>required int32 roomType = 3;</code>
     *
     * <pre>
     * 房间类型
     * </pre>
     */
    int getRoomType();

    // repeated int32 playerIDs = 4;
    /**
     * <code>repeated int32 playerIDs = 4;</code>
     *
     * <pre>
     * 玩家ID列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerIDsList();
    /**
     * <code>repeated int32 playerIDs = 4;</code>
     *
     * <pre>
     * 玩家ID列表
     * </pre>
     */
    int getPlayerIDsCount();
    /**
     * <code>repeated int32 playerIDs = 4;</code>
     *
     * <pre>
     * 玩家ID列表
     * </pre>
     */
    int getPlayerIDs(int index);

    // required int32 ownerID = 5;
    /**
     * <code>required int32 ownerID = 5;</code>
     *
     * <pre>
     * 房主ID
     * </pre>
     */
    boolean hasOwnerID();
    /**
     * <code>required int32 ownerID = 5;</code>
     *
     * <pre>
     * 房主ID
     * </pre>
     */
    int getOwnerID();

    // required bool isFinished = 6;
    /**
     * <code>required bool isFinished = 6;</code>
     *
     * <pre>
     * 所有牌局结束
     * </pre>
     */
    boolean hasIsFinished();
    /**
     * <code>required bool isFinished = 6;</code>
     *
     * <pre>
     * 所有牌局结束
     * </pre>
     */
    boolean getIsFinished();

    // required int64 roundRecordStartTime = 7;
    /**
     * <code>required int64 roundRecordStartTime = 7;</code>
     *
     * <pre>
     * 当前局开始时间
     * </pre>
     */
    boolean hasRoundRecordStartTime();
    /**
     * <code>required int64 roundRecordStartTime = 7;</code>
     *
     * <pre>
     * 当前局开始时间
     * </pre>
     */
    long getRoundRecordStartTime();

    // required int32 currRoundCount = 8;
    /**
     * <code>required int32 currRoundCount = 8;</code>
     *
     * <pre>
     * 当前已结束局数
     * </pre>
     */
    boolean hasCurrRoundCount();
    /**
     * <code>required int32 currRoundCount = 8;</code>
     *
     * <pre>
     * 当前已结束局数
     * </pre>
     */
    int getCurrRoundCount();
  }
  /**
   * Protobuf type {@code com.kodgames.message.proto.record.BGRecordLogSYN}
   */
  public static final class BGRecordLogSYN extends
      com.google.protobuf.GeneratedMessage
      implements BGRecordLogSYNOrBuilder {
    // Use BGRecordLogSYN.newBuilder() to construct.
    private BGRecordLogSYN(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BGRecordLogSYN(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BGRecordLogSYN defaultInstance;
    public static BGRecordLogSYN getDefaultInstance() {
      return defaultInstance;
    }

    public BGRecordLogSYN getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BGRecordLogSYN(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              roomStartTime_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              roomType_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                playerIDs_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              playerIDs_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                playerIDs_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerIDs_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              ownerID_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              isFinished_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              roundRecordStartTime_ = input.readInt64();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              currRoundCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          playerIDs_ = java.util.Collections.unmodifiableList(playerIDs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.kodgames.message.proto.record.RecordProtoBuf.internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.kodgames.message.proto.record.RecordProtoBuf.internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN.class, com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN.Builder.class);
    }

    public static com.google.protobuf.Parser<BGRecordLogSYN> PARSER =
        new com.google.protobuf.AbstractParser<BGRecordLogSYN>() {
      public BGRecordLogSYN parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BGRecordLogSYN(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BGRecordLogSYN> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 roomID = 1;
    public static final int ROOMID_FIELD_NUMBER = 1;
    private int roomID_;
    /**
     * <code>required int32 roomID = 1;</code>
     *
     * <pre>
     * 房间ID
     * </pre>
     */
    public boolean hasRoomID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 roomID = 1;</code>
     *
     * <pre>
     * 房间ID
     * </pre>
     */
    public int getRoomID() {
      return roomID_;
    }

    // required int64 roomStartTime = 2;
    public static final int ROOMSTARTTIME_FIELD_NUMBER = 2;
    private long roomStartTime_;
    /**
     * <code>required int64 roomStartTime = 2;</code>
     *
     * <pre>
     * 房间开始时间
     * </pre>
     */
    public boolean hasRoomStartTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 roomStartTime = 2;</code>
     *
     * <pre>
     * 房间开始时间
     * </pre>
     */
    public long getRoomStartTime() {
      return roomStartTime_;
    }

    // required int32 roomType = 3;
    public static final int ROOMTYPE_FIELD_NUMBER = 3;
    private int roomType_;
    /**
     * <code>required int32 roomType = 3;</code>
     *
     * <pre>
     * 房间类型
     * </pre>
     */
    public boolean hasRoomType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 roomType = 3;</code>
     *
     * <pre>
     * 房间类型
     * </pre>
     */
    public int getRoomType() {
      return roomType_;
    }

    // repeated int32 playerIDs = 4;
    public static final int PLAYERIDS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> playerIDs_;
    /**
     * <code>repeated int32 playerIDs = 4;</code>
     *
     * <pre>
     * 玩家ID列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerIDsList() {
      return playerIDs_;
    }
    /**
     * <code>repeated int32 playerIDs = 4;</code>
     *
     * <pre>
     * 玩家ID列表
     * </pre>
     */
    public int getPlayerIDsCount() {
      return playerIDs_.size();
    }
    /**
     * <code>repeated int32 playerIDs = 4;</code>
     *
     * <pre>
     * 玩家ID列表
     * </pre>
     */
    public int getPlayerIDs(int index) {
      return playerIDs_.get(index);
    }

    // required int32 ownerID = 5;
    public static final int OWNERID_FIELD_NUMBER = 5;
    private int ownerID_;
    /**
     * <code>required int32 ownerID = 5;</code>
     *
     * <pre>
     * 房主ID
     * </pre>
     */
    public boolean hasOwnerID() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 ownerID = 5;</code>
     *
     * <pre>
     * 房主ID
     * </pre>
     */
    public int getOwnerID() {
      return ownerID_;
    }

    // required bool isFinished = 6;
    public static final int ISFINISHED_FIELD_NUMBER = 6;
    private boolean isFinished_;
    /**
     * <code>required bool isFinished = 6;</code>
     *
     * <pre>
     * 所有牌局结束
     * </pre>
     */
    public boolean hasIsFinished() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool isFinished = 6;</code>
     *
     * <pre>
     * 所有牌局结束
     * </pre>
     */
    public boolean getIsFinished() {
      return isFinished_;
    }

    // required int64 roundRecordStartTime = 7;
    public static final int ROUNDRECORDSTARTTIME_FIELD_NUMBER = 7;
    private long roundRecordStartTime_;
    /**
     * <code>required int64 roundRecordStartTime = 7;</code>
     *
     * <pre>
     * 当前局开始时间
     * </pre>
     */
    public boolean hasRoundRecordStartTime() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int64 roundRecordStartTime = 7;</code>
     *
     * <pre>
     * 当前局开始时间
     * </pre>
     */
    public long getRoundRecordStartTime() {
      return roundRecordStartTime_;
    }

    // required int32 currRoundCount = 8;
    public static final int CURRROUNDCOUNT_FIELD_NUMBER = 8;
    private int currRoundCount_;
    /**
     * <code>required int32 currRoundCount = 8;</code>
     *
     * <pre>
     * 当前已结束局数
     * </pre>
     */
    public boolean hasCurrRoundCount() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 currRoundCount = 8;</code>
     *
     * <pre>
     * 当前已结束局数
     * </pre>
     */
    public int getCurrRoundCount() {
      return currRoundCount_;
    }

    private void initFields() {
      roomID_ = 0;
      roomStartTime_ = 0L;
      roomType_ = 0;
      playerIDs_ = java.util.Collections.emptyList();
      ownerID_ = 0;
      isFinished_ = false;
      roundRecordStartTime_ = 0L;
      currRoundCount_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRoomID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRoomStartTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRoomType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOwnerID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsFinished()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRoundRecordStartTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCurrRoundCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, roomID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, roomStartTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, roomType_);
      }
      for (int i = 0; i < playerIDs_.size(); i++) {
        output.writeInt32(4, playerIDs_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, ownerID_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(6, isFinished_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(7, roundRecordStartTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, currRoundCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, roomID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, roomStartTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, roomType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerIDs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerIDs_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerIDsList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, ownerID_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, isFinished_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, roundRecordStartTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, currRoundCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.kodgames.message.proto.record.BGRecordLogSYN}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYNOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.kodgames.message.proto.record.RecordProtoBuf.internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.kodgames.message.proto.record.RecordProtoBuf.internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN.class, com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN.Builder.class);
      }

      // Construct using com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        roomStartTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        roomType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        playerIDs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        ownerID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        isFinished_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        roundRecordStartTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        currRoundCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.kodgames.message.proto.record.RecordProtoBuf.internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_descriptor;
      }

      public com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN getDefaultInstanceForType() {
        return com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN.getDefaultInstance();
      }

      public com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN build() {
        com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN buildPartial() {
        com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN result = new com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomID_ = roomID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.roomStartTime_ = roomStartTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.roomType_ = roomType_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          playerIDs_ = java.util.Collections.unmodifiableList(playerIDs_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.playerIDs_ = playerIDs_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.ownerID_ = ownerID_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isFinished_ = isFinished_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.roundRecordStartTime_ = roundRecordStartTime_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.currRoundCount_ = currRoundCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN) {
          return mergeFrom((com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN other) {
        if (other == com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN.getDefaultInstance()) return this;
        if (other.hasRoomID()) {
          setRoomID(other.getRoomID());
        }
        if (other.hasRoomStartTime()) {
          setRoomStartTime(other.getRoomStartTime());
        }
        if (other.hasRoomType()) {
          setRoomType(other.getRoomType());
        }
        if (!other.playerIDs_.isEmpty()) {
          if (playerIDs_.isEmpty()) {
            playerIDs_ = other.playerIDs_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePlayerIDsIsMutable();
            playerIDs_.addAll(other.playerIDs_);
          }
          onChanged();
        }
        if (other.hasOwnerID()) {
          setOwnerID(other.getOwnerID());
        }
        if (other.hasIsFinished()) {
          setIsFinished(other.getIsFinished());
        }
        if (other.hasRoundRecordStartTime()) {
          setRoundRecordStartTime(other.getRoundRecordStartTime());
        }
        if (other.hasCurrRoundCount()) {
          setCurrRoundCount(other.getCurrRoundCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRoomID()) {
          
          return false;
        }
        if (!hasRoomStartTime()) {
          
          return false;
        }
        if (!hasRoomType()) {
          
          return false;
        }
        if (!hasOwnerID()) {
          
          return false;
        }
        if (!hasIsFinished()) {
          
          return false;
        }
        if (!hasRoundRecordStartTime()) {
          
          return false;
        }
        if (!hasCurrRoundCount()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.kodgames.message.proto.record.RecordProtoBuf.BGRecordLogSYN) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 roomID = 1;
      private int roomID_ ;
      /**
       * <code>required int32 roomID = 1;</code>
       *
       * <pre>
       * 房间ID
       * </pre>
       */
      public boolean hasRoomID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 roomID = 1;</code>
       *
       * <pre>
       * 房间ID
       * </pre>
       */
      public int getRoomID() {
        return roomID_;
      }
      /**
       * <code>required int32 roomID = 1;</code>
       *
       * <pre>
       * 房间ID
       * </pre>
       */
      public Builder setRoomID(int value) {
        bitField0_ |= 0x00000001;
        roomID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 roomID = 1;</code>
       *
       * <pre>
       * 房间ID
       * </pre>
       */
      public Builder clearRoomID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomID_ = 0;
        onChanged();
        return this;
      }

      // required int64 roomStartTime = 2;
      private long roomStartTime_ ;
      /**
       * <code>required int64 roomStartTime = 2;</code>
       *
       * <pre>
       * 房间开始时间
       * </pre>
       */
      public boolean hasRoomStartTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 roomStartTime = 2;</code>
       *
       * <pre>
       * 房间开始时间
       * </pre>
       */
      public long getRoomStartTime() {
        return roomStartTime_;
      }
      /**
       * <code>required int64 roomStartTime = 2;</code>
       *
       * <pre>
       * 房间开始时间
       * </pre>
       */
      public Builder setRoomStartTime(long value) {
        bitField0_ |= 0x00000002;
        roomStartTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 roomStartTime = 2;</code>
       *
       * <pre>
       * 房间开始时间
       * </pre>
       */
      public Builder clearRoomStartTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        roomStartTime_ = 0L;
        onChanged();
        return this;
      }

      // required int32 roomType = 3;
      private int roomType_ ;
      /**
       * <code>required int32 roomType = 3;</code>
       *
       * <pre>
       * 房间类型
       * </pre>
       */
      public boolean hasRoomType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 roomType = 3;</code>
       *
       * <pre>
       * 房间类型
       * </pre>
       */
      public int getRoomType() {
        return roomType_;
      }
      /**
       * <code>required int32 roomType = 3;</code>
       *
       * <pre>
       * 房间类型
       * </pre>
       */
      public Builder setRoomType(int value) {
        bitField0_ |= 0x00000004;
        roomType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 roomType = 3;</code>
       *
       * <pre>
       * 房间类型
       * </pre>
       */
      public Builder clearRoomType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        roomType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 playerIDs = 4;
      private java.util.List<java.lang.Integer> playerIDs_ = java.util.Collections.emptyList();
      private void ensurePlayerIDsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          playerIDs_ = new java.util.ArrayList<java.lang.Integer>(playerIDs_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 playerIDs = 4;</code>
       *
       * <pre>
       * 玩家ID列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerIDsList() {
        return java.util.Collections.unmodifiableList(playerIDs_);
      }
      /**
       * <code>repeated int32 playerIDs = 4;</code>
       *
       * <pre>
       * 玩家ID列表
       * </pre>
       */
      public int getPlayerIDsCount() {
        return playerIDs_.size();
      }
      /**
       * <code>repeated int32 playerIDs = 4;</code>
       *
       * <pre>
       * 玩家ID列表
       * </pre>
       */
      public int getPlayerIDs(int index) {
        return playerIDs_.get(index);
      }
      /**
       * <code>repeated int32 playerIDs = 4;</code>
       *
       * <pre>
       * 玩家ID列表
       * </pre>
       */
      public Builder setPlayerIDs(
          int index, int value) {
        ensurePlayerIDsIsMutable();
        playerIDs_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 playerIDs = 4;</code>
       *
       * <pre>
       * 玩家ID列表
       * </pre>
       */
      public Builder addPlayerIDs(int value) {
        ensurePlayerIDsIsMutable();
        playerIDs_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 playerIDs = 4;</code>
       *
       * <pre>
       * 玩家ID列表
       * </pre>
       */
      public Builder addAllPlayerIDs(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerIDsIsMutable();
        super.addAll(values, playerIDs_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 playerIDs = 4;</code>
       *
       * <pre>
       * 玩家ID列表
       * </pre>
       */
      public Builder clearPlayerIDs() {
        playerIDs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // required int32 ownerID = 5;
      private int ownerID_ ;
      /**
       * <code>required int32 ownerID = 5;</code>
       *
       * <pre>
       * 房主ID
       * </pre>
       */
      public boolean hasOwnerID() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 ownerID = 5;</code>
       *
       * <pre>
       * 房主ID
       * </pre>
       */
      public int getOwnerID() {
        return ownerID_;
      }
      /**
       * <code>required int32 ownerID = 5;</code>
       *
       * <pre>
       * 房主ID
       * </pre>
       */
      public Builder setOwnerID(int value) {
        bitField0_ |= 0x00000010;
        ownerID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ownerID = 5;</code>
       *
       * <pre>
       * 房主ID
       * </pre>
       */
      public Builder clearOwnerID() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ownerID_ = 0;
        onChanged();
        return this;
      }

      // required bool isFinished = 6;
      private boolean isFinished_ ;
      /**
       * <code>required bool isFinished = 6;</code>
       *
       * <pre>
       * 所有牌局结束
       * </pre>
       */
      public boolean hasIsFinished() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool isFinished = 6;</code>
       *
       * <pre>
       * 所有牌局结束
       * </pre>
       */
      public boolean getIsFinished() {
        return isFinished_;
      }
      /**
       * <code>required bool isFinished = 6;</code>
       *
       * <pre>
       * 所有牌局结束
       * </pre>
       */
      public Builder setIsFinished(boolean value) {
        bitField0_ |= 0x00000020;
        isFinished_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isFinished = 6;</code>
       *
       * <pre>
       * 所有牌局结束
       * </pre>
       */
      public Builder clearIsFinished() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isFinished_ = false;
        onChanged();
        return this;
      }

      // required int64 roundRecordStartTime = 7;
      private long roundRecordStartTime_ ;
      /**
       * <code>required int64 roundRecordStartTime = 7;</code>
       *
       * <pre>
       * 当前局开始时间
       * </pre>
       */
      public boolean hasRoundRecordStartTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int64 roundRecordStartTime = 7;</code>
       *
       * <pre>
       * 当前局开始时间
       * </pre>
       */
      public long getRoundRecordStartTime() {
        return roundRecordStartTime_;
      }
      /**
       * <code>required int64 roundRecordStartTime = 7;</code>
       *
       * <pre>
       * 当前局开始时间
       * </pre>
       */
      public Builder setRoundRecordStartTime(long value) {
        bitField0_ |= 0x00000040;
        roundRecordStartTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 roundRecordStartTime = 7;</code>
       *
       * <pre>
       * 当前局开始时间
       * </pre>
       */
      public Builder clearRoundRecordStartTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        roundRecordStartTime_ = 0L;
        onChanged();
        return this;
      }

      // required int32 currRoundCount = 8;
      private int currRoundCount_ ;
      /**
       * <code>required int32 currRoundCount = 8;</code>
       *
       * <pre>
       * 当前已结束局数
       * </pre>
       */
      public boolean hasCurrRoundCount() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 currRoundCount = 8;</code>
       *
       * <pre>
       * 当前已结束局数
       * </pre>
       */
      public int getCurrRoundCount() {
        return currRoundCount_;
      }
      /**
       * <code>required int32 currRoundCount = 8;</code>
       *
       * <pre>
       * 当前已结束局数
       * </pre>
       */
      public Builder setCurrRoundCount(int value) {
        bitField0_ |= 0x00000080;
        currRoundCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 currRoundCount = 8;</code>
       *
       * <pre>
       * 当前已结束局数
       * </pre>
       */
      public Builder clearCurrRoundCount() {
        bitField0_ = (bitField0_ & ~0x00000080);
        currRoundCount_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.kodgames.message.proto.record.BGRecordLogSYN)
    }

    static {
      defaultInstance = new BGRecordLogSYN(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.kodgames.message.proto.record.BGRecordLogSYN)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025protobuf/record.proto\022!com.kodgames.me" +
      "ssage.proto.record\"\267\001\n\016BGRecordLogSYN\022\016\n" +
      "\006roomID\030\001 \002(\005\022\025\n\rroomStartTime\030\002 \002(\003\022\020\n\010" +
      "roomType\030\003 \002(\005\022\021\n\tplayerIDs\030\004 \003(\005\022\017\n\007own" +
      "erID\030\005 \002(\005\022\022\n\nisFinished\030\006 \002(\010\022\034\n\024roundR" +
      "ecordStartTime\030\007 \002(\003\022\026\n\016currRoundCount\030\010" +
      " \002(\005B\020B\016RecordProtoBuf"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_kodgames_message_proto_record_BGRecordLogSYN_descriptor,
              new java.lang.String[] { "RoomID", "RoomStartTime", "RoomType", "PlayerIDs", "OwnerID", "IsFinished", "RoundRecordStartTime", "CurrRoundCount", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
