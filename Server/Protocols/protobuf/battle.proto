package com.kodgames.message.proto.battle;
option java_outer_classname = "BattleProtoBuf";

message ResultScorePROTO			// 结算分数信息
{
	required int32 type = 1;		// 分数类型
	required int32 calcType = 2;	// 计算类型
	required int32 point = 3;		// 分数数值
}

message ResultScoreData						// 结算分数数据
{
	required int32 sourceId = 1;			// 分数来源玩家
	repeated ResultScorePROTO datas = 2;	// 分数信息列表
}

message PlayStepPROTO							// 打牌操作信息
{
	optional int32 roleId = 1;					// 打牌玩家
	optional int32 pointInGame = 2;				// 当前局得分
	optional int32 playType = 3;				// 操作类型
	optional bytes cards = 4;					// 操作的牌
	optional ResultScoreData scoreData = 5;		// 分数信息
	optional int32 sourceRoleId = 6;			// 操作来源玩家
}

message BattlePlayerInfoPROTO 					// 牌局内玩家信息，牌局开始和重新连接时使用
{
	required int32 roleId = 1;					// 角色ID
	required int32 totalPoint = 4;				// 房间内累计得分
	required int32 pointInGame = 5;				// 当前局得分
	required int32 status = 6;					// 玩家状态
	optional bytes handCards = 7;				// 手里的牌
	optional bytes outCards = 8;				// 已出的牌
	repeated PlayStepPROTO operateCards = 9;	// 吃碰杠等操作牌
}

message BCPlayStepSYN					// Battle 向 Client 同步玩家操作信息
{
	repeated PlayStepPROTO steps = 1;	// 出牌步骤信息
	required int32 protocolSeq = 2;		// 打牌协议序列号
}

message BCBattlePlayerInfoSYN					// Battle 向 Client 同步牌局内玩家信息
{
	repeated BattlePlayerInfoPROTO players = 1;	// 玩家牌局信息
	optional bool isRecover = 2;				// 是否是复牌
	required int32 protocolSeq = 3;				// 打牌协议序列号
	optional bool enableMutilHu = 4; 			// 牌局是否可以多次胡
	optional int32 totalCardsNum = 5;			// 牌局的最大牌数量 : 13, 7等
}

message CBPlayCardREQ				// Client 向 Battle 请求打牌
{
	required int32 playType = 1;	// 出牌类型
	optional bytes cards = 2;		// 打出的牌
}

message BCPlayCardRES					// Battle 向 Client 应答打牌
{
	required int32 result = 1;			// 打牌结果
	required int32 protocolSeq = 2;		// 打牌协议序列号
}

message ResultEventPROTO						// 结算事件信息
{
	required bool addOperation = 1;				// 主动或被动
	required ResultScorePROTO score = 2;		// 分数信息
	repeated ResultScorePROTO subScores = 3;	// 子分数列表
	repeated int32 targets = 4;					// 目标玩家
	required int32 combinedTimes = 5; 			// 合并次数
	required int32 combinedPoint = 6; 			// 合并后对每一个人收取的分数
	required int32 eventPoint = 7;    			// 事件总分
}

message PlayerMatchResultPROTO					// 玩家单局结算信息
{
	required int32 roleId = 1;					// 角色ID
	required int32 totalPoint = 2;				// 房间内累计得分
	required int32 pointInGame = 3; 			// 当前局得分
	repeated ResultEventPROTO events = 4;		// 结算事件列表
	optional bytes handCards = 5;			 	// 手里的牌
	repeated PlayStepPROTO operateCards = 6; 	// 吃碰杠等操作牌
	required int32 status = 7;					// 玩家本局的状态
	optional bytes outCards = 8;				// 打出的牌
	optional bytes huCards = 9;					// 可胡的牌
}

// 回放玩家数据
message MatchPlaybackPlayerPROTO
{
	required int32 roleId = 1; 					// 角色ID
	required bytes handCards = 2;				// 初始手牌信息
}

// Step组
message MatchPlaybackStepsPROTO
{
	repeated PlayStepPROTO steps = 1;		   // 一组回放信息
}

// 回放数据
message MatchPlaybackPROTO
{
	repeated MatchPlaybackPlayerPROTO playerDatas = 1; 			   // 玩家信息
	repeated MatchPlaybackStepsPROTO records = 2;				   // 回放信息
}

message ResultGamePROTO				// 牌局总结算条目信息
{
	required int32 type = 1;		// 类型
	required bool addOperation = 2;	// 主动或被动
	required int32 times = 3;		// 重复次数
}

message PlayerMatchFinalResultPROTO				// 玩家牌局总结算信息
{
	required int32 roleId = 1;					// 角色ID
	required int32 totalPoint = 2;				// 房间内累计得分
	repeated ResultGamePROTO gameResult = 5;	// 结算条目列表
}

message BCMatchResultSYN								// Battle 向 Client 同步单局结算信息
{
	required bool isHuang = 1;							// 是否黄庄
	repeated PlayerMatchResultPROTO matchResults = 2;	// 玩家结算信息列表
	required int32 protocolSeq = 3;						// 打牌协议序列号
	optional bool isRejoin = 4;							// 是否为断线重连
	optional bytes lastCards = 5;						// 剩余牌值
}

message BCFinalMatchResultSYN 								// 房间内总结算
{
	repeated PlayerMatchFinalResultPROTO gameResults = 1;	// 玩家结算信息列表
	optional int32 reason= 2;								// 房间销毁原因
}
