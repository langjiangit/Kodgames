package com.kodgames.message.proto.game;
option java_outer_classname = "GameProtoBuf";

message CGLoginREQ						// Client 向 Game 请求登入
{
    required int32 roleId = 1;			// 角色ID
	required int32 sex = 2;				// 性别
    required string nickname = 3;		// 昵称
	required string headImageUrl = 4;	// 头像URL
	required int32 accountId = 5;		// 账号ID
	required string channel = 6;		// 渠道
	required string signature = 7;      // 数字签名，用来防止aid假冒
	required string unionid = 8;        // 把auth发来的unionid传上来
}

message GCLoginRES						// Game 向 Client 应答登入
{
    required int32 result = 1;			// 登录结果
    optional int32 roomCardCount = 2;	// 房卡数量
	optional int32 battleId = 3;		// 战斗服ServerId
    optional int32 roomId = 4;			// 房间ID
    optional int64 marqueeVersion = 5;  // 跑马灯版本号
    optional bool  newMail = 6;         // 是否有新邮件
    optional bool newLimitedCostlessActivity = 7;	//限免活动版本号
    optional int64 noticeVersion = 8;	// 公告版本号
    repeated ActivityInfoPROTO activityInfo = 9; 
	optional int32 buttonValue = 10;    // 开关的值
	optional int64 timeStamp = 11;			// 时间同步
	optional int32 clubId = 12;			// 房间所属的clubId
	optional bool isNewPlayer = 13;     // 是否是新玩家，true:新玩家，false:老玩家
	optional string connGroup = 14;     // 分配的连接组 (下次登录使用)
}

// 活动信息
message ActivityInfoPROTO
{
	required int32 activityId = 1;
	required int64 startTime = 2;
	required int64 endTime = 3;
}

message CGLogoutREQ				// Client 向 Game 请求登出
{
}

message GCLogoutRES				// Game 向 Client 应答登出
{
	required int32 result = 1;	// 登出结果
}

message GCKickoffSYNC			// Game 向 Client 同步被踢下线通知
{
	required int32 reason = 1;	// 踢下线原因
}

message BGRoomCardModifySYNC		// Battle 向 Game 通知玩家应扣卡
{
	required int32 creatorId = 1;	// 房主
	repeated int32 roleIds = 2;		// 房间内所有角色的ID
	required int32 roomId = 3;		// 所在房间
	required int32 roundCount = 4;	// 房间圈/局规则
}

message GCRoomCardModifySYNC			// Game 向 Client 同步房卡数变更通知
{
	required int32 roomCardCount = 1;	// 剩余房卡数
}

message RoomConfigPROTO				// 房间配置信息
{
	required int32 type = 1;		// 房间配置类型
	required int32 roundCount = 2;	// 房间可打牌圈数
	required int32 gameCount = 3;	// 房间可打牌局数
	optional int32 cardCount = 4;	// 房间消耗
}

message GBGameConfigSYN							// Game 向 Battle 同步游戏配置信息
{
	required string creatorClassName = 1;		// 房间creator的类名, 需要全名, 用于反射构造
	repeated RoomConfigPROTO roomConfigs = 2;	// 房间配置
}

message GCLGameConfigSYN						// Game 向 club 同步游戏配置信息
{
	required string creatorClassName = 1;		// 房间creator的类名, 需要全名, 用于反射构造
	repeated RoomConfigPROTO roomConfigs = 2;	// 房间配置
}

message CGCreateRoomREQ				// Client/Club 向 Game 请求创建房间
{
	required int32 roomType = 1;	// 房间类型
	repeated int32 gameplays = 2;	// 玩法规则
	required int32 roundCount = 3;	// 房间圈/局规则
	required int32 freeActivityId = 4;       // 限免活动id, -1：不以限免方式创建房间
	required int32 payType = 5;		// 扣卡方式（房主扣卡/AA扣卡）
	required bool voice = 6;	    //是否开启语音
}

message GBCreateRoomREQ				// Game 向 Battle 请求创建房间
{
	required int32 creatorId = 1;	// 创建者roleId
	required int32 roomId = 2;		// 房间ID
	required int32 roomType = 3;	// 房间类型
	repeated int32 gameplays = 4;	// 玩法规则
	required int32 roundCount = 5;	// 房间圈/局规则
	required int32 payType = 6;		// 扣卡方式（房主扣卡/AA扣卡）
	required bool voice = 7;	    //是否开启语音

}

message BGCreateRoomRES				// Battle 向 Game 应答创建房间
{
	required int32 result = 1;		// 房间创建结果
	required int32 roomId = 2;		// 房间ID
	required int32 creatorId = 3;	// 创建者roleId
	repeated int32 gameplays = 4;	// 房间玩法,目前只用来记录bi日志
	required int32 playerMax = 5;	// 玩家最大值
	required int32 payType = 6;		// 扣卡方式（房主扣卡/AA扣卡）
	required bool voice = 7;	    //是否开启语音
	
}

message GCCreateRoomRES				// Game 向 Client 应答创建房间
{
	required int32 result = 1;		// 房间创建结果
	optional int32 battleId = 2;	// 战斗服ServerId
	optional int32 roomId = 3;		// 房间ID
	optional bool voice = 4;	    //是否开启语音
	
}

message CGQueryBattleIdREQ		// Client 向 Game 请求查询Battle Server Id
{
	required int32 roomId = 1;	// 用于查询Battle的房间ID
	required int32 roleId = 2;	// 用于查询玩家的钻石是否足够进入房间
}

message GCQueryBattleIdRES			// Game 向 Client 应答查询Battle Server Id
{
	required int32 result = 1;		// 查询结果
	optional int32 battleId = 2;	// Battle Server Id
}

message BGEnterRoomSYN			// Battle 向 Game 通知有玩家进入房间
{
	required int32 roomId = 1;	// 房间ID
	required int32 roleId = 2;	// 角色ID
}

message BGQuitRoomSYN			// Battle 向 Game 通知有玩家离开房间
{
	required int32 roomId = 1;	// 房间ID
	required int32 roleId = 2;	// 角色ID
}

message BGDestroyRoomSYN			// Battle 向 Game 通知销毁房间
{
	required int32 roomId = 1;		// 房间ID
	repeated int32 roleList = 2;	// 当前玩家列表
	required int32 reason = 3;		// 房间销毁原因
}

message GBGmtDestroyRoomSYN		// Game 向 Battle 通知GMT销毁房间
{
	required int32 roomId = 1;	// 房间ID
}

message BGBattleStatisticsSYN				// Battle 向 Game 同步房间统计信息
{
	required int32 totalRoomCount = 1;		// 房间总数
	required int32 positiveRoomCount = 2;	// 活跃房间总数
	required int32 silentRoomCount = 3;		// 沉默房间总数
}

message PlayerHistoryPROTO						// 玩家房间战绩总览
{
	required int32 roleId = 1;					// 角色ID
	required int32 position = 2;				// 角色座位
	required string nickname = 3;				// 昵称
	required string headImgUrl = 4;				// 头像URL
	required int32 sex = 5;						// 性别
	required int32 totalPoint = 6;				// 房间内总分数
}

message RoundReportPROTO
{
	repeated bytes playerRecords = 1; 				//所有玩家的单局信息
	required int64 startTime = 2; 					//本局的开始时间
	optional bytes lastCards = 3; 					//本局的剩余牌
}

message RoomHistoryPROTO							// 房间战绩
{
	required int32 roomId = 1;						// 房间ID
	required int64 createTime = 2;					// 房间创建时间
	repeated PlayerHistoryPROTO playerRecords = 3;	// 玩家信息和战绩总览
	optional int32 roundType = 4;					// 圈/局类型
	repeated int32 gameplays = 5; 					// 玩法规则
	optional int32 roundCount = 6; 					// 局数
	optional int32 playerMaxCardCount = 7;			// 玩家的最大手牌
	optional bool enableMutilHu = 8;				// 是否允许多次胡牌（赢牌）
}

message CGHistoryREQ			// Client 向 Game 请求历史战绩
{
	required int64 version = 1;	// 玩家战绩版本
	optional int32 clubId = 2;	// 俱乐部id
	optional int32 queryRoleId = 3;	// 经理查看其他人
}

message GCHistoryRES							// Game 向 Client 应答历史战绩
{
	required int32 result = 1;					// 错误码
	optional int64 version = 2;					// 玩家战绩版本
	repeated RoomHistoryPROTO roomRecords = 3;	// 房间战绩
	optional int32 clubId = 4;					// 俱乐部id
	optional int32 queryRoleId = 5;				// 要查询的玩家的id
}

message CGHistoryRoomREQ
{
	required int64 createTime = 1;  // 创建时间
	required int32 roomId = 2 ;		// 房间ID
	required int32 queryRoleId = 3; // 要查询的玩家的id 透传给client
}

message GCHistoryRoomRES
{
	required int32 result = 1;	
	required int64 createTime = 2;  				// 创建时间
	required int32 roomId = 3;						// 房间ID
	repeated RoundReportPROTO roundReportRecords = 4;		// 每一局的信息
	required int32 queryRoleId = 5; // 要查询的玩家的id 透传给client
}

message CGHistoryPlaybackREQ
{
	required int64 creatTime = 1; 	// 创建时间
	required int32 roomId = 2;    	// 房间ID
	required int32 recordIndex = 3; // 索引
}

message GCHistoryPlaybackRES
{
	required int32 result = 1;
	optional bytes playbackDatas = 2;
}

message BGMatchResultSYN						// Battle 向 Game 同步房间单局战绩
{
	required int32 roomId = 1;						// 房间ID
	required int64 createTime = 2;					// 房间创建时间
	repeated PlayerHistoryPROTO playerRecords = 3;	// 玩家信息和战绩总览
	optional int32 roundType = 4;					// 圈/局类型
	optional int32 roundCount = 5; 					// 局数
	optional int32 playerMaxCardCount = 6;			// 玩家的最大手牌
	required RoundReportPROTO roundReportRecord = 7; //房间中每局的信息
	repeated int32 gameplays = 8;					 // 房间规则
	required bytes playbackDatas = 9;				 // 牌局回放数据
	optional bytes lastCards = 10;					// 剩余的牌	
	required bool enableMutilHu = 11;				// 是否允许多次胡牌（赢牌）
}

message BGFinalMatchResultSYN						// Battle 向 Game 同步房间总结算的协议
{
	required int32 roomId = 1;						// 房间ID
	required int64 createTime = 2;					// 房间创建时间
	repeated PlayerHistoryPROTO playerRecords = 3;	// 玩家信息战绩总览
	optional int32 roundType = 4;					// 圈/局类型
}

message GCAntiAddictionSYN	// Game 向 Client 同步防沉迷警告
{
}

message InviterRoomInfoPROTO
{
	required int32 creatorId = 1;			// 房主id
	repeated int32 gamePlays = 2;			// 玩法
	required string nickname = 3;
	required string headImageUrl = 4;
	required int32 roomId = 5;				// 房间id 
	required int32 roundType = 6;			// 圈/局类型
	required int32 payType = 7;				// 扣卡方式（房主扣卡/AA扣卡）
}

message GBInviterRoomInfoREQ				// 客户端获取邀请者的玩家信息和房间信息
{
	required int32 roomdId = 1;
	required int32 roleId = 2;
}

message BGInviterRoomInfoRES
{
	required int32 result = 1;
	optional InviterRoomInfoPROTO info = 2;
	required int32 roleId = 3;
}

message CGInviterRoomInfoREQ
{
	required int32 roomId = 1;
	
}

message GCInviterRoomInfoRES
{
	required int32 result = 1;
	optional InviterRoomInfoPROTO info = 2;
}

// 时间同步的时间戳
message CGTimeSynchronizationREQ
{

}
//服务器当前的时间戳
message GCTimeSynchronizationRES
{
	required int32 result = 1;
	required int64 timeStamp = 2;
}

message CGJoinRoleInfoREQ	// club 2 game 加入俱乐部时请求玩家信息
{
	required int32 roleId = 1;
	required int32 inviterId = 2;
	required int32 clubId = 3;
}

message GCJoinRoleInfoRES	// game 2 club 返回加入俱乐部时请求玩家信息
{
	required int32 roleId = 1;				// 申请人
	required string roleName = 2;
	required int32 gameCount = 3;			// 申请时游戏的总局数
	required string roleIcon = 4;
	required int32 inviterId = 5;			// 邀请人
	required string inviterName = 6;
	required int32 inviterGameCount = 7;
	required string inviterIcon = 8;		// 邀请人头像
	required int32 result = 9;
	required int32 clubId = 10;
}

//手机绑定相关协议
//是否绑定
message CGBindMobileREQ                       //Client 向  Game 请求是否已绑定手机
{
	required int32 roleId = 1;                //用户ID
}

message GCBindMobileRES                       //Game 向 Client 回复是否绑定
{
	required int32 result = 1;                //返回结果(已绑定，未绑定)
	required string phoneNumber = 2;          //若已绑定，所绑定手机号
	required int32 diamondNum = 3;            //绑定获取的钻石数量
}

//获取验证码
message CGSendBindCodeREQ                     //Client 向  Game 请求获取验证码
{
	required int32 roleId = 1;                //用户ID
	required string phoneNumber = 2;          //要绑定的手机号
}

message GCSendBindCodeRES                     //Game 向 Client 回复验证码获取状态
{
	required int32 result = 1;                //返回结果(已绑定，未绑定)
	optional int32 validTime = 2;             //验证码有效时间
}

//判断验证码是否有效
message CGBindValidREQ                    	  //Client 向  Game 请求验证码是否有效
{
	required int32 roleId = 1;                //用户ID
	required string mobilePhone = 2;          //要绑定的手机号
	required string validCode = 3;            //验证码
}

message GCBindValidRES                        //Game 向 Client 回复验证结果
{
	required int32 result = 1;                //返回结果(验证码无效，验证码超时，验证成功)
	required int32 diamondNum = 2;            //绑定获取的钻石数量
}


//推广员TODO
message  CGSendPhoneNumberREQ	//client 向 game 发送手机号
{
	required int32 roleId = 1;	// 玩家id
	required string phoneNumber = 2;	//手机号
}

message  GCSendPhoneNumberRES	//game 向 client 回应手机号结果
{
	required int32 result = 1;	//回应手机号结果	
	optional int32 validTime = 2; //验证码的有效时间
}

message CGSendVerificationCodeREQ  // client 向 game 发送验证码和手机号 
{
    required int32 roleId = 1;	// 玩家id
	required string phoneNumber = 2;	//手机号
	required string verificationNumber = 3;		//验证码 
}

message GCSendVerificationCodeRES	// game 向client 回应 验证码结果
{
 	 required int32 result = 1;	//回应验证码结果
} 

// 查询领奖信息
message CGQueryPromoterRewardsREQ
{
}

// 回复查询领奖信息
message GCQueryPromoterRewardsRES
{
	required int32 result = 1;                 // 错误码
	optional int32 inviteeCount = 2;           // 已邀请玩家数
	optional float unreceivedRewardsCount = 3; // 未领取的奖励数量
	optional float totalRewardsCount = 4;      // 已领取的奖励数量
	optional float maxRewardsCountPerDay = 5;  // 每日最多领取数量
}

// 领奖请求
message CGPromoterRewardREQ
{
}

// 领奖回复
message GCPromoterRewardRES
{
	required int32 result = 1;               // 错误码
	optional string gongZhongHao = 2;        // 公众号
	optional float unreceivedRewardsCount = 3; // 未领取的奖励数量
	optional float totalRewardsCount = 4;      // 已领取的奖励数量
}

// 客户端分享请求(只用于服务器bi日志)
message CGPromoterShareREQ
{
}

message GCPromoterShareRES
{
	required int32 result = 1;				// 错误码
}


// 弹窗消息相关协议
message CGPopUpMessageInfoREQ            //弹窗消息请求
{
    required int64 version = 1;            //弹窗消息版本号
}

message GCPopUpMessageInfoSYN{            // 弹窗消息推送
    required int64 version = 1;            //弹窗消息版本号
}

message GCPopUpMessageInfoRES 
{
    required int32 result = 1;          //错误码
    optional int64 version = 2;			//版本号
    optional int64 create = 3;         	//弹窗消息创建时间
	optional int64 update = 4;         	//弹窗消息更新时间
	optional int32 pop = 5;        		//默认弹窗消息，1：通知类别，2：活动类别，3：更新类别，4：消息类别
	optional int32 mode = 6;        	//每次弹窗还是首次弹窗, 0：不弹窗，1：首次弹窗，2：每次弹窗
    
    repeated PopUpMessageTimesPROTO times = 7;     //弹窗消息生效时间段集合
    repeated PopUpMessageTypesPROTO types = 8;     //弹窗消息集合
}

message PopUpMessageTimesPROTO
{
    required string start = 1;         	//弹窗消息开始时间
    required string end = 2;         	//弹窗消息结束时间
}

message PopUpMessageTypesPROTO        
{	
   required int32 tab = 1;         		//弹窗消息标识，1：通知类别，2：活动类别，3：更新类别，4：消息类别
   required int32 style = 2;         	//弹窗消息种类，1：文本类型，2：图片类型
   repeated string content = 3;   		//弹窗消息内容
}

message CGContinueRoomREQ
{
	required int32 freeActivityId = 1;       // 限免活动id, -1：不以限免方式创建房间
}

message GBContinueRoomREQ
{
	required int32 creatorId = 1;	// 创建者roleId
	required int32 newRoomId = 2;	// 新房间ID
	required int32 oldRoomId = 3;	// 老房间ID
}

message BGContinueRoomRES
{
	required int32 result = 1;		// 房间创建结果
	required int32 roomId = 2;		// 房间ID
	required int32 creatorId = 3;	// 创建者roleId
	repeated int32 gameplays = 4;	// 房间玩法,目前只用来记录bi日志
}

message GCContinueRoomRES
{
	required int32 result = 1;		// 房间创建结果
	optional int32 roomId = 3;		// 房间ID
}

message CGContinueEnterRoomREQ
{
	required int32 roleId = 1;			// 用于查询玩家的钻石是否足够进入房间
	required int32 roomId = 2;			// 用于查询Battle的房间ID
}

message GBContinueEnterRoomREQ
{
	required int32 roleId = 1;			// 用于查询玩家的钻石是否足够进入房间
	required int32 roomId = 2;			// 用于查询Battle的房间ID
	required int32 oldRoomId = 6;		// 老房间ID
}

message BGContinueEnterRoomRES
{
	required int32 result = 1;					// 进入结果
	required int32 roomType = 2; 				// 房间类型
	repeated int32 gameplays = 3;				// 玩法规则
	required int32 roundCount = 4;				// 房间圈/局规则
	required bool  isHaveBeginFirstGame = 5;	// 已经开始第一局
	required int32 maxPlayerCount = 6;			// 房间最大人数
	required int32 payType = 7;					// 支付方式
	required int32 roleId = 8;					// 玩家ID
	required int32 roomId = 9;					// 房间ID
}

message GCContinueEnterRoomRES
{
	required int32 result = 1;					// 进入结果
	optional int32 roomType = 2; 				// 房间类型
	repeated int32 gameplays = 3;				// 玩法规则
	optional int32 roundCount = 4;				// 房间圈/局规则
	optional bool  isHaveBeginFirstGame = 5;	// 已经开始第一局
	optional int32 maxPlayerCount = 6;			// 房间最大人数
	optional int32 payType = 7;					// 支付方式
}

message GBContinueEnterRoomOverSYN
{
	required bool result = 1;		// 玩家加入结果同步给Battle
	required int32 roleId = 2;		// 玩家ID
	required int32 roomId = 3;		// 房间ID
}